//include header files
#include <stdlib.h>
#include <stdio.h>
#include "node.h"

//quicksort method
//takes one node pointer and recursively sorts in acending order, returning the head node
//this function definition is not what is specified for the assignment - Derek
struct mynode* quicksort(struct mynode *head)
{

	if( head->next == NULL)
	{
		return head;
	}

	struct mynode *current = head;
	int pivot = head->value;
	struct mynode *left;
	struct mynode *right;
	struct mynode *leftstart = left;
	struct mynode *rightstart = right;
	current = current->next;
	while(current->next != NULL)
	{

		if(current->value < pivot)
		{
			if(!left)
			left->next = (struct mynode *)malloc(sizeof(struct mynode));
			left = left->next;
			left->value = current->value;
			
		}
		else
		{
			right->value = current->value;
			right->next = (struct mynode *)malloc(sizeof(struct mynode));
			right = right->next;
		}
		current = current->next;
	}
	leftstart = quicksort(leftstart);
	rightstart = quicksort(rightstart);
	printlist(leftstart);
	left->next = head;
	printlist(rightstart);
	head->next = rightstart->next;
	return leftstart->next;

}

//printlist method
//loops through a given linked list and prints the data in each node
void printlist(struct mynode *head)
{
    struct mynode *node = head;
    int i;

    for (i=1; node->next; i++) {
        printf("%3d ", node->value);
        node = node->next;  
        //goes down a line if the number of data poins printed exceeds 20 per line
        if (i % 20 == 0) {
            printf("\n");
        }
    }
    printf("\n");
}

//freelist method
//deletes all the nodes of a iven head, effectively erasing the linked list
void freelist(struct mynode *head)
{
    struct mynode *temp, *node = head;
    //deletes all nodes after the head
    while (node) {
        temp = node;
        node = node->next;
        free(temp);
    }
    //deletes the head node
    head = NULL;
}
